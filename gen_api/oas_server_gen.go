// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddUserBook implements addUserBook operation.
	//
	// Appends a book to user's list if the list doesn't contain it, if contains, an error returned.
	//
	// POST /users/{user_id}/books
	AddUserBook(ctx context.Context, req *Book, params AddUserBookParams) (AddUserBookRes, error)
	// GetUserBook implements getUserBook operation.
	//
	// Returns a book by user's and book's ids.
	//
	// GET /users/{user_id}/books/{book_id}
	GetUserBook(ctx context.Context, params GetUserBookParams) (GetUserBookRes, error)
	// GetUserBooks implements getUserBooks operation.
	//
	// Returns list of user's books by their id.
	//
	// GET /users/{user_id}/books
	GetUserBooks(ctx context.Context, params GetUserBooksParams) ([]Book, error)
	// RemoveUserBook implements removeUserBook operation.
	//
	// Removes a book by id if exists, otherwise an error returned.
	//
	// DELETE /users/{user_id}/books/{book_id}
	RemoveUserBook(ctx context.Context, params RemoveUserBookParams) (RemoveUserBookRes, error)
	// UpdateReadingProgress implements updateReadingProgress operation.
	//
	// Sets page value to a new one, returns an error if the book doesn't exist.
	//
	// PUT /users/{user_id}/books/{book_id}
	UpdateReadingProgress(ctx context.Context, req *UpdateReadingProgressReq, params UpdateReadingProgressParams) (UpdateReadingProgressRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
